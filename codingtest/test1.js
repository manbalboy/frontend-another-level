// 문제 설명
// 1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하는 함수, solution을 만들어 보세요.
//
//   소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.
// (1은 소수가 아닙니다.)
//
// 제한 조건
// n은 2이상 1000000이하의 자연수입니다.


function solution(n) {

  const array = [false, false, Array(n-1).fill(true)];

  for(let i = 2; i*i <=n; i+=1){
    if(array[i]){
      for(let j = i * 2; j<=n; j+= i ) {
        array[j] = false;
      }
    }
  }


  return array.filter(v=>v).length;
}

// 문제 설명
// 자연수 n을 뒤집어 각 자리 숫자를 원소로 가지는 배열 형태로 리턴해주세요. 예를들어 n이 12345이면 [5,4,3,2,1]을 리턴합니다.
//
//   제한 조건
// n은 10,000,000,000이하인 자연수입니다.
//   입출력 예

function solution(n) {
  return String(n).split("").reverse();
}


// 문제 설명
// 임의의 양의 정수 n에 대해, n이 어떤 양의 정수 x의 제곱인지 아닌지 판단하려 합니다.
//   n이 양의 정수 x의 제곱이라면 x+1의 제곱을 리턴하고, n이 양의 정수 x의 제곱이 아니라면 -1을 리턴하는 함수를 완성하세요.
//
//   제한 사항
// n은 1이상, 50000000000000 이하인 양의 정수입니다.
//   입출력 예
// n	return
// 121	144
// 3	-1
// 입출력 예 설명
// 입출력 예#1
// 121은 양의 정수 11의 제곱이므로, (11+1)를 제곱한 144를 리턴합니다.
//
//   입출력 예#2
// 3은 양의 정수의 제곱이 아니므로, -1을 리턴합니다.


function solution(n) {
  const sqrt = Math.sqrt(n);

  if(sqrt % 1 === 0) {
    return sqrt > 0 ? (sqrt+1) * (sqrt+1) : -1;
  }
}